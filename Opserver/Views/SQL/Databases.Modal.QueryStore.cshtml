@using StackExchange.Opserver.Data.SQL
@using StackExchange.Opserver.Views.SQL
@model DatabasesModel
@{
    Layout = "Databases.Modal.cshtml";
    var s = Model.Instance;
    var readsResult = s.GetQueryStoreLogicalReadInfo(Model.Database);
    var readsData = readsResult.Data;

    var cpuResult = s.GetQueryStoreCpuInfo(Model.Database);
    var cpuData = cpuResult.Data;
}
@section top {
    <span class="pull-right small">Reads @Helpers.PollNow(readsResult)</span>
    <span class="pull-right small">CPU @Helpers.PollNow(cpuResult)</span>
}
@if (readsResult.Data == null || !readsResult.Successful)
{
    <div class="alert alert-warning">
        <h5>There was an error fetching table info from @s.Name for @Model.Database</h5>
        <p class="error-stack">@readsResult.ErrorMessage</p>
    </div>
}
else
{
    <div class="alert alert-dismissible alert-info" style="margin-bottom: 2px;">
        Query Store Analysis Top 25 by Logical Reads with more than one plan
         
    </div>
    <div class="alert alert-warning">
        Note: If there are multiple plans in the recent window 'Recent First Exec' 
        will represent the first exec of the first plan 
    </div>
    <table class="table table-striped table-hover text-nowrap table-super-condensed table-responsive js-database-indexes">
        <thead>
            <tr>
                <th></th>
                <th>Query Id</th>
                <th>Historic LR's</th>
                <th>Recent LR's</th>
                <th>Avg Historic LR's</th>
                <th>Avg Recent LR's</th>
                <th>Extra Workload</th>
                <th>% Increase</th>
                <th>No. Execs</th>
                <th>No. Plans</th>
                <th>No. Plans Recent</th>
                <th>Recent First Exec</th>
                <th>Query</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var i in readsData)
            {
                <tr data-obj="@i.QueryId" class="js-next-collapsible">
                    <td class="text-muted">
                    </td>
                    <td class="" data-val="@i.QueryId">
                        @i.QueryId
                    </td>
                    <td class="" data-val="@i.TotalLogicalReadsHistorical">
                        @i.TotalLogicalReadsHistorical
                    </td>
                    <td class="" data-val="@i.TotalLogicalReadsRecent">
                        @i.TotalLogicalReadsRecent
                    </td>
                    <td class="" data-val="@i.AverageHistorical">
                        @i.AverageHistorical
                    </td>
                    <td class="" data-val="@i.AverageRecent">
                        @i.AverageRecent
                    </td>
                    <td class="" data-val="@i.AdditionalLogicalReadsWorkload">
                        @i.AdditionalLogicalReadsWorkload
                    </td>
                    <td class="" data-val="@i.PercentIncrease">
                        @i.PercentIncrease
                    </td>
                    <td class="" data-val="@i.CountOfExecutionsRecent">
                        @i.CountOfExecutionsRecent
                    </td>
                    <td class="" data-val="@i.NumberOfPlans">
                        @i.NumberOfPlans
                    </td>
                    <td class="" data-val="@i.NumberOfPlansRecent">
                        @i.NumberOfPlansRecent
                    </td>
                    <td class="" data-val="@i.FirstExecutedRecent">
                        @i.FirstExecutedRecent
                    </td>
                    <td class="">
                        @(i.QueryText?.TruncateWithEllipsis(50))
                    </td>
                </tr>
                <tr class="tablesorter-childRow hidden"></tr>

                <tr class="tablesorter-childRow hidden"></tr>
            }
        </tbody>
        <tfoot>
            @if (!readsResult.Data.Any())
            {
                <tr>
                    <td colspan="8">
                        <div class="no-content">No query store logical read info found.</div>
                    </td>
                </tr>
            }
            else
            {
                <tr class="total-row">
                    <td colspan="8">
                        <b>Total</b> <span class="text-muted">(@readsResult.Data.Count.Pluralize("result"))</span>
                    </td>
                </tr>
            }
        </tfoot>
    </table>


    <div class="alert alert-dismissible alert-info" style="margin-bottom: 2px;">
        Query Store Analysis Top 25 by CPU with more than one plan
    </div>
    <table class="table table-striped table-hover text-nowrap table-super-condensed table-responsive js-database-indexes">
        <thead>
            <tr>
                <th></th>
                <th>Query Id</th>
                <th>Historic CPU</th>
                <th>Recent CPU</th>
                <th>Avg Historic CPU</th>
                <th>Avg Recent CPU</th>
                <th>Extra Workload</th>
                <th>% Increase</th>
                <th>No. Execs</th>
                <th>No. Plans</th>
                <th>No. Plans Recent</th>
                <th>Recent First Exec</th>
                <th>Query</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var i in cpuData)
            {
                <tr data-obj="@i.QueryId" class="js-next-collapsible">
                    <td class="text-muted">
                    </td>
                    <td class="" data-val="@i.QueryId">
                        @i.QueryId
                    </td>
                    <td class="" data-val="@i.TotalCpuTimeHistorical">
                        @i.TotalCpuTimeHistorical
                    </td>
                    <td class="" data-val="@i.TotalCpuTimeRecent">
                        @i.TotalCpuTimeRecent
                    </td>
                    <td class="" data-val="@i.AverageHistorical">
                        @i.AverageHistorical
                    </td>
                    <td class="" data-val="@i.AverageRecent">
                        @i.AverageRecent
                    </td>
                    <td class="" data-val="@i.AdditionalCpuTimeWorkload">
                        @i.AdditionalCpuTimeWorkload
                    </td>
                    <td class="" data-val="@i.PercentIncrease">
                        @i.PercentIncrease
                    </td>
                    <td class="" data-val="@i.CountOfExecutionsRecent">
                        @i.CountOfExecutionsRecent
                    </td>
                    <td class="" data-val="@i.NumberOfPlans">
                        @i.NumberOfPlans
                    </td>
                    <td class="" data-val="@i.NumberOfPlansRecent">
                        @i.NumberOfPlansRecent
                    </td>
                    <td class="" data-val="@i.FirstExecutedRecent">
                        @i.FirstExecutedRecent
                    </td>
                    <td class="">
                        @(i.QueryText?.TruncateWithEllipsis(50))
                    </td>
                </tr>
                <tr class="tablesorter-childRow hidden"></tr>

                <tr class="tablesorter-childRow hidden"></tr>
            }
        </tbody>
        <tfoot>
            @if (!cpuResult.Data.Any())
            {
                <tr>
                    <td colspan="8">
                        <div class="no-content">No query store CPU data found.</div>
                    </td>
                </tr>
            }
            else
            {
                <tr class="total-row">
                    <td colspan="8">
                        <b>Total</b> <span class="text-muted">(@cpuResult.Data.Count.Pluralize("result"))</span>
                    </td>
                </tr>
            }
        </tfoot>
    </table>
    <script>
        $(function () {
            $('.js-database-indexes').tablesorter({
                headers: {
                    3: { sorter: 'dataVal', sortInitialOrder: 'desc' },
                    4: { sorter: 'dataVal', sortInitialOrder: 'desc' },
                    5: { sorter: 'dataVal', sortInitialOrder: 'desc' },
                    6: { sorter: 'dataVal', sortInitialOrder: 'desc' },
                    7: { sorter: 'dataVal', sortInitialOrder: 'desc' },
                    8: { sorter: 'dataVal', sortInitialOrder: 'desc' }
                }
            });
            Status.highlight();
        });
    </script>
}
